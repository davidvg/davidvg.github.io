<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Muerte por Checklist (Publicaciones sobre robotica)</title><link>https://davidvg.github.io/</link><description></description><atom:link href="https://davidvg.github.io/categories/cat_robotica.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><lastBuildDate>Mon, 10 Jun 2019 17:44:52 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Simulación de circuito de lectura de tensión</title><link>https://davidvg.github.io/posts/simulacion-circuito-lectura-tension/</link><dc:creator>David Vázquez</dc:creator><description>&lt;div&gt;&lt;p&gt;Para un proyecto de robótica que estoy comenzando, basado en versiones de los rover marcianos de NASA, necesitaba diseñar un circuito para hacer la lectura de la corriente que circula por un motor controlado mediante un driver &lt;a href="https://www.allegromicro.com/~/media/Files/Datasheets/A4952-3-Datasheet.pdf"&gt;Allegro A4953&lt;/a&gt;. Este driver tiene un pin LSS en el que se puede conectar una resistencia $R_S$ para medir la corriente del motor, que se obtiene simplemente dividiendo la tensión $V_S$ en la resistencia por el valor de la misma:&lt;/p&gt;
&lt;p&gt;$$
I_{motor} = \frac{V_S}{R_S}
$$&lt;/p&gt;
&lt;p&gt;Para diseñar el circuito decidí dibujar el esquema en &lt;a href="http://www.kicad-pcb.org/"&gt;KiCad&lt;/a&gt; y simularlo con &lt;a href="http://ngspice.sourceforge.net/"&gt;ngspice&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Esquema" src="https://davidvg.github.io/images/a4953_current_sensing.png"&gt;&lt;/p&gt;
&lt;p&gt;La simulación muestra la gráfica siguiente para los parámetros $V_S$, $V_M$ y $V_{OUT}$ cuando $V_S$ se hace variar entre $-0.44V$ y $+0.44V$.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Plot" src="https://davidvg.github.io/images/output.jpg"&gt;&lt;/p&gt;
&lt;p&gt;La simulación devuelve los siguientes valores de tensión para los principales puntos de funcionamiento:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="right"&gt;$V_S$&lt;/th&gt;
&lt;th&gt;$V_M$&lt;/th&gt;
&lt;th&gt;$V_{OUT}$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="right"&gt;$-0.44$&lt;/td&gt;
&lt;td&gt;$0.23$&lt;/td&gt;
&lt;td&gt;$0.90$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;$0.00$&lt;/td&gt;
&lt;td&gt;$0.66$&lt;/td&gt;
&lt;td&gt;$2.63$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;$+0.44$&lt;/td&gt;
&lt;td&gt;$1.09$&lt;/td&gt;
&lt;td&gt;$4.35$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Procedimiento del cálculo&lt;/h4&gt;
&lt;p&gt;La hoja de datos da una expresión para calcular $R_S$:&lt;/p&gt;
&lt;p&gt;$$
I_{max} = \frac{V_{ref}}{A_v R_S}
$$&lt;/p&gt;
&lt;p&gt;siendo $I_{max}$ la corriente máxima del motor, $V_{ref}$ la tensión aplicada en el pin VREF (se usarán 5V) y $A_v$ una ganancia que en la hoja de datos se define con valor 10. Con esto, se puede calcular el valor de $R_S$ adecuado para este caso:&lt;/p&gt;
&lt;p&gt;$$
R_S = \frac{V_{ref}}{A_v  I_{max}} = \frac{5V}{10 \times 1.1A} = 0.45 \Omega
$$&lt;/p&gt;
&lt;p&gt;Según las especificaciones del driver, el valor máximo admisible en LSS, en valor absoluto, es de $0.5 V$. Eligiendo $R_S= 0.4 \Omega$, la tensión máxima que se tendrá en LSS es, en valor absoluto:&lt;/p&gt;
&lt;p&gt;$$
V_S = 0.4 \Omega \times 1.1A = 0.44V &amp;lt; 0.5V
$$&lt;/p&gt;
&lt;p&gt;Como resultado, en LSS se tendrán tensiones en el rango $(-0.44V, +0.44V)$ (línea azul en la gráfica) en función de la corriente que circula por el motor.&lt;/p&gt;
&lt;p&gt;Este rango de tensiones será leído mediante el &lt;a href="https://es.wikipedia.org/wiki/Conversor_de_se%C3%B1al_anal%C3%B3gica_a_digital"&gt;conversor analógico/digital (ADC)&lt;/a&gt; de un &lt;a href="https://store.arduino.cc/arduino-nano"&gt;Arduino Nano&lt;/a&gt;, que registra tensiones entre $0$ y $5V$ con una resolución de 10 bit (1024 cuentas), por lo que es necesario adaptar estas tensiones a valores adecuados para tener una resolución decente en la lectura. Idealmente, se intentaría usar todo el rango $(0V, 5V)$ del ADC, pero conviene dejar márgenes de seguridad para asegurar que no se alcanzan los máximos y para evitar que el amplificador operacional que hará la adaptación trabaje en los extremos ($0V$ y $VCC$), lo que puede producir valores erróneos.&lt;/p&gt;
&lt;p&gt;La adaptación de tensiones se realiza usando un &lt;a href="http://www.ti.com/lit/ds/symlink/lm358.pdf"&gt;amplificador operacional LM358&lt;/a&gt; configurado como &lt;a href="https://es.wikipedia.org/wiki/Amplificador_operacional#Amplificador_no_inversor"&gt;amplificador no inversor&lt;/a&gt;. En esta configuración, la ganancia es positiva, por lo que el primer obstáculo está en transformar el rango de tensiones en LSS para que todas sean positivas. Para ello se coloca en serie con la tensión $V_S$ un diodo alimentado desde el pin de $3.3V$ del Arduino que sumará su tensión de codo, unos $0.66V$ de promedio, al valor de $V_S$, por lo que se pasa a tener un rango de tensiones $(Vd-Vs, Vd+Vs) = (0.23V, 1.09V)$, todas positivas. Estas tensiones, $V_M$ en el esquema y en la gráfica, se pasan como entrada a la etapa amplificadora para adaptarlas al rango $(0V, 5V)$ del ADC.&lt;/p&gt;
&lt;p&gt;La ganancia del amplificador no inversor viene dada por&lt;/p&gt;
&lt;p&gt;$$
A_v = 1 + \frac{R_4}{R_2+R_3}
$$&lt;/p&gt;
&lt;p&gt;y la tensión en la salida será&lt;/p&gt;
&lt;p&gt;$$
V_{OUT} = A_v   V_M
$$&lt;/p&gt;
&lt;p&gt;Según las especificaciones del LM358, en la salida de este operacional se pueden obtener tensiones entre $0V$ y $VCC-1.5V$, por lo que si fijamos un valor máximo aproximado de tensión en el ADC de 4.5V se tiene que VCC debe ser igual a 6V, que es una de las tensiones que se va a usar en la placa definitiva. Ese valor máximo también da un margen de seguridad en la tensión medida en el ADC.&lt;/p&gt;
&lt;p&gt;Para obtener 4.5V en la salida necesitamos una ganancia de tensión igual a&lt;/p&gt;
&lt;p&gt;$$\frac{4.5V}{1.09V} = 4.13 = 1 + \frac{R_4}{R_2+R_3}$$&lt;/p&gt;
&lt;p&gt;por lo que la relación $\frac{R_4}{R_2+R_3}$ tiene que ser menor o igual a $3.13$ para no sobrepasar los $4.5V$.  Seleccionando $R_2+R_3 = 110 \: k \Omega$ y $R_4 = 330 \:k \Omega$ se obtiene una relación de $3$ y una ganancia $A_v = 4$.&lt;/p&gt;
&lt;p&gt;Con esta ganancia el rango de tensiones en la salida del amplificador será&lt;/p&gt;
&lt;p&gt;$$
V_{OUT} = (A_v \times 0.23, \: Av \times 1.09) = (0.90V, \: 4.35V)
$$&lt;/p&gt;
&lt;p&gt;que se corresponden con valores del ADC de $(184, 890)$, utilizando un $69 \%$ del rango del ADC.&lt;/p&gt;
&lt;h4&gt;Resolución en corriente del ADC&lt;/h4&gt;
&lt;p&gt;Se puede calcular la resolución de la medida de corriente por el motor, es decir cuánto cambia la corriente por cada cuenta del ADC.&lt;/p&gt;
&lt;p&gt;La tensión de salida del amplificador es:&lt;/p&gt;
&lt;p&gt;$$
V_{OUT} = A_v(R_S i_S + V_d)
$$&lt;/p&gt;
&lt;p&gt;siendo $i_S$ la corriente que circula por $R_S$ (se desprecia la corrientes que circula por el diodo, del orden de $1 mA$) y $V_d$ la tensión de codo en el diodo.&lt;/p&gt;
&lt;p&gt;Expresado como cuentas del ADC:&lt;/p&gt;
&lt;p&gt;$$
N = \frac{1024}{5}  V_{OUT}
$$&lt;/p&gt;
&lt;p&gt;Si tomamos dos medidas consecutivas del ADC, $N1$ y $N2 = N1 + 1$:&lt;/p&gt;
&lt;p&gt;$$
N2 - N1 = \frac{1024}{5} Av (R_S i_2 + V_d) - \frac{1024}{5} Av (R_S * i_1 + V_d)
$$&lt;/p&gt;
&lt;p&gt;Operando:&lt;/p&gt;
&lt;p&gt;$$
1 = \frac{1024}{5} Av R_S (i_2 - i_1)&lt;/p&gt;
&lt;p&gt;$$&lt;/p&gt;
&lt;p&gt;Y se tiene:&lt;/p&gt;
&lt;p&gt;$$
(i2 - i1) = \Delta i = \frac{5}{1024 \: A_v R_S} = 3.05 \dfrac{mA}{cuenta}
$$&lt;/p&gt;
&lt;p&gt;Es decir, se tiene una resolución en la medida de corriente que circula por el motor de unos $3 \: mA$.&lt;/p&gt;&lt;/div&gt;</description><category>driver</category><category>electronica</category><category>kicad</category><category>robotica</category><category>spice</category><guid>https://davidvg.github.io/posts/simulacion-circuito-lectura-tension/</guid><pubDate>Mon, 10 Jun 2019 17:30:00 GMT</pubDate></item><item><title>Turtlebot3 y ROS Melodic en Ubuntu 18.04</title><link>https://davidvg.github.io/posts/turtlebot3-y-ros-melodic-en-ubuntu-1804/</link><dc:creator>David Vázquez</dc:creator><description>&lt;div&gt;&lt;p&gt;Al empezar a hacer pruebas con el &lt;a href="https://davidvg.github.io/posts/turtlebot3/"&gt;Turtlebot3&lt;/a&gt; empezaron a aparecer algunos problemas de compatibilidad relacionados con las diferentes versiones de ROS y Ubuntu, que se resumen en:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El código del Turtlebot3 está escrito para la versión &lt;a href="https://wiki.ros.org/kinetic"&gt;Kinetic&lt;/a&gt; de ROS.&lt;/li&gt;
&lt;li&gt;Kinetic es compatible con las versiones Wily (15.10) y Xenial (16.04) de Ubuntu.&lt;/li&gt;
&lt;li&gt;En mi ordenador tengo instalado Ubuntu Bionic (18.04), versión para la que Kinetic no es compatible.&lt;/li&gt;
&lt;li&gt;ROS Melodic, la versión que tiene soporte para Ubuntu 18.04, no tiene soporte completo para Turtlebot3 (algunos de los módulos y funciones necesarios para el Turtlebot3 aún no se han portado a Melodic)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: La versión de ROS que puedo instalar “fácilmente” en mi sistema operativo no da soporte completo al Turtlebot3, y a la vez la versión de ROS que da soporte a Turtlebot3 no es compatible con mi sistema operativo. Incompatibilidad en ambos sentidos.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Esto me dejaba varias posibles soluciones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crear una &lt;a href="https://es.wikipedia.org/wiki/M%C3%A1quina_virtual"&gt;máquina virtual&lt;/a&gt; corriendo Ubuntu 16.04 e instalar ROS Kinetic.&lt;/li&gt;
&lt;li&gt;Usar &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; para crear un contenedor con Ubuntu 16.04 e instalar ROS Kinetic.&lt;/li&gt;
&lt;li&gt;Usar una de las imágenes de &lt;a href="https://docs.docker.com/samples/library/ros/"&gt;Docker con ROS preinstalado&lt;/a&gt; con la versión Kinetic.&lt;/li&gt;
&lt;li&gt;Usar Ubuntu 18.04 y ROS Melodic e ir solucionando los problemas a medida que surjan.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;La máquina virtual la descarté de mano, por ser más práctico usar los contenedores de Docker. Sin embargo, como en los grupos de usuarios de ROS se habla de que todo el código del Turtlebot3 se está portando poco a poco a Melodic, opté por probar con la última opción e ir resolviendo los problemas a medida que se iban &lt;del&gt;amontonando&lt;/del&gt; produciendo.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Si eso más terde me pongo..." src="https://davidvg.github.io/images/memes/ITcrowd-put-this-with-rest-of-fire.jpg" width="40%"&gt; &lt;/p&gt;
&lt;h3&gt;Instalación de módulos no portados a Melodic&lt;/h3&gt;
&lt;p&gt;Instalar los módulos que &lt;a href="https://index.ros.org/packages/#melodic"&gt;no estan aún portados&lt;/a&gt; resulta más fácil de lo podría pensarse. Aunque no estén disponibles para ROS Melodic, los repositorios de cada uno de ellos están disponibles en GitHub; muchos ya tienen una rama lista para ser integrada en futuras actualizaciones de Melodic, y el resto pueden descargarse y compilarse con las características del sistema que se emplee.
Los módulos necesarios para hacer funcionar el Turtlebot3 y que no están disponibles en Melodic pero pueden instalarse desde GitHub son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;openslam_gmapping&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slam_gmapping&lt;/code&gt;: módulo de creación de mapas mediante &lt;em&gt;SLAM&lt;/em&gt; (&lt;em&gt;Simultaneous Localization and Mapping&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hector_slam&lt;/code&gt;, &lt;code&gt;slam_karto&lt;/code&gt;: otros métodos de cartografiado utilizados por el Turtlebot.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;frontier_exploration&lt;/code&gt;: módulo de exploración de mapas.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;teleop_twist_joy&lt;/code&gt;: utilización de &lt;em&gt;joystick&lt;/em&gt; para controlar el robot.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Estos paquetes se pueden descargar o clonar en el directorio &lt;code&gt;src&lt;/code&gt; del proyecto y compilar con &lt;code&gt;catkin_make&lt;/code&gt; o &lt;code&gt;catkin build&lt;/code&gt;. El resto de paquetes disponibles para Melodic se instalan mediante el gestor de software de Ubuntu, o mediante &lt;code&gt;apt-get&lt;/code&gt; o similar.&lt;/p&gt;
&lt;h3&gt;Mapas globales y locales&lt;/h3&gt;
&lt;p&gt;Un error que aparece por cambios en Melodic respecto a Kinetic se produce por diferencia del criterio usado a la hora de definir la ruta a los mapas en el paquete de &lt;a href="http://emanual.robotis.com/docs/en/platform/turtlebot3/navigation/"&gt;navegación&lt;/a&gt; del Turtlebot3.&lt;/p&gt;
&lt;p&gt;[Reproducción del error]
[Explicación del problema]&lt;/p&gt;
&lt;p&gt;Para solucionarlo hay que editar dos archivos dentro del directorio &lt;code&gt;src/turtlebot3_navigation/params&lt;/code&gt;, en los que se definen algunos parámetros necesarios para la navegación.&lt;/p&gt;
&lt;p&gt;Uno de los archivos que hay que modificar en dicho directorio es &lt;code&gt;global_cost_map_params.yaml&lt;/code&gt;, eliminando las barras en&lt;code&gt;/map&lt;/code&gt; y &lt;code&gt;/base_footprint&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;global_costmap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;global_frame&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;
  &lt;span class="n"&gt;robot_base_frame&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;base_footprint&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;para que queden del siguiente modo (nótese la ausencia de barras delante de los parámetros):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;global_costmap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;global_frame&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;
  &lt;span class="n"&gt;robot_base_frame&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;base_footprint&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;El segundo archivo a modificar es &lt;code&gt;local_costmap_params.yaml&lt;/code&gt;, eliminando las barras para que queden del siguiente modo:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;local_costmap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;global_frame&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;odom&lt;/span&gt;
  &lt;span class="n"&gt;robot_base_frame&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;base_footprint&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Con esto los parámetros &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;base_footprint&lt;/code&gt; (tanto para los parámetros globales como locales) y &lt;code&gt;odom&lt;/code&gt; se definen como relativos al propio paquete, y no como absolutos como ocurre con el caso de colocar la barra (&lt;code&gt;/&lt;/code&gt;) delante.&lt;/p&gt;
&lt;h3&gt;Bola extra: problemas de visualización en &lt;code&gt;rviz&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Otro problema derivado de la pantalla de alta resolución de mi portátil, un Dell XPS 13, son los &lt;a href="https://wiki.ros.org/rvi://github.com/ros-visualization/rviz/issues/1069"&gt;problemas de visualización en &lt;code&gt;rviz&lt;/code&gt;&lt;/a&gt;, el visualizador que usa ROS; además, al intentar redimensionar la ventana o al colocar otra ventana encima, no se actualiza el contenido, por lo que no es utilizable.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://davidvg.github.io/images/rviz-problema-visualizacion.png" alt="Problemas de visualización en rviz" width="60%"&gt;&lt;/p&gt;
&lt;p&gt;Para &lt;a href="https://github.com/ros-visualization/rviz/issues/1203"&gt;solucionarlo&lt;/a&gt;, basta con exportar (para dejarlas en blanco) dos variables de entorno:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;export QT_AUTO_SCREEN_SCALE_FACTOR=
export QT_SCREEN_SCALE_FACTORS=
&lt;/pre&gt;


&lt;p&gt;Con estos pasos, el entorno está plenamente funcional.&lt;/p&gt;&lt;/div&gt;</description><category>ROS</category><category>turtlebot</category><guid>https://davidvg.github.io/posts/turtlebot3-y-ros-melodic-en-ubuntu-1804/</guid><pubDate>Mon, 04 Mar 2019 16:46:03 GMT</pubDate></item></channel></rss>